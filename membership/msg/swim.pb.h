// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_swim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_swim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_swim_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_swim_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_swim_2eproto;
namespace swim {
class Join;
class JoinDefaultTypeInternal;
extern JoinDefaultTypeInternal _Join_default_instance_;
}  // namespace swim
PROTOBUF_NAMESPACE_OPEN
template<> ::swim::Join* Arena::CreateMaybeMessage<::swim::Join>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace swim {

enum Join_Type : int {
  Join_Type_REQUEST = 0,
  Join_Type_ACK = 1,
  Join_Type_Join_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Join_Type_Join_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Join_Type_IsValid(int value);
constexpr Join_Type Join_Type_Type_MIN = Join_Type_REQUEST;
constexpr Join_Type Join_Type_Type_MAX = Join_Type_ACK;
constexpr int Join_Type_Type_ARRAYSIZE = Join_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Join_Type_descriptor();
template<typename T>
inline const std::string& Join_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Join_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Join_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Join_Type_descriptor(), enum_t_value);
}
inline bool Join_Type_Parse(
    const std::string& name, Join_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Join_Type>(
    Join_Type_descriptor(), name, value);
}
// ===================================================================

class Join :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:swim.Join) */ {
 public:
  Join();
  virtual ~Join();

  Join(const Join& from);
  Join(Join&& from) noexcept
    : Join() {
    *this = ::std::move(from);
  }

  inline Join& operator=(const Join& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join& operator=(Join&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Join* internal_default_instance() {
    return reinterpret_cast<const Join*>(
               &_Join_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Join& a, Join& b) {
    a.Swap(&b);
  }
  inline void Swap(Join* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join* New() const final {
    return CreateMaybeMessage<Join>(nullptr);
  }

  Join* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join& from);
  void MergeFrom(const Join& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "swim.Join";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_swim_2eproto);
    return ::descriptor_table_swim_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Join_Type Type;
  static constexpr Type REQUEST =
    Join_Type_REQUEST;
  static constexpr Type ACK =
    Join_Type_ACK;
  static inline bool Type_IsValid(int value) {
    return Join_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Join_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Join_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Join_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Join_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Join_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Join_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .swim.Join.Type type = 1;
  void clear_type();
  ::swim::Join_Type type() const;
  void set_type(::swim::Join_Type value);
  private:
  ::swim::Join_Type _internal_type() const;
  void _internal_set_type(::swim::Join_Type value);
  public:

  // @@protoc_insertion_point(class_scope:swim.Join)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Join

// .swim.Join.Type type = 1;
inline void Join::clear_type() {
  type_ = 0;
}
inline ::swim::Join_Type Join::_internal_type() const {
  return static_cast< ::swim::Join_Type >(type_);
}
inline ::swim::Join_Type Join::type() const {
  // @@protoc_insertion_point(field_get:swim.Join.type)
  return _internal_type();
}
inline void Join::_internal_set_type(::swim::Join_Type value) {
  
  type_ = value;
}
inline void Join::set_type(::swim::Join_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:swim.Join.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace swim

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::swim::Join_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::swim::Join_Type>() {
  return ::swim::Join_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_swim_2eproto
